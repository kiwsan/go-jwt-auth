language: go

services:
  - docker

before_script:
  - sed 's/${ENV_DATABASE_HOST}/'"${DATABASE_HOST}'"/g' appsettings.staging.yml > appsettings.test.yml
  - sed 's/${ENV_DATABASE_USER}/'"${DATABASE_USER}'"/g' appsettings.staging.yml > appsettings.${TRAVIS_ENVIRONMENT}.yml
  - sed 's/${ENV_DATABASE_PASSWORD}/'"${DATABASE_PASSWORD}'"/g' appsettings.staging.yml > appsettings.${TRAVIS_ENVIRONMENT}.yml
  - sed 's/${ENV_DATABASE_PORT}/'"${DATABASE_PORT}"'/g' appsettings.staging.yml > appsettings.${TRAVIS_ENVIRONMENT}.yml
  - docker build -t golang-identity-service:${TRAVIS_COMMIT} .
  - docker run -d -p 127.0.0.1:8000:8000 golang-identity-service:${TRAVIS_COMMIT}

script:
  - docker ps
  # the following command line builds the project, runs the tests with coverage and then execute the SonarCloud analysis
  - sonar-scanner
  - echo "$DOCKER_PASSWORD" | docker login $DOCKER_CUSTOM_HOST -u "$DOCKER_USERNAME" --password-stdin  
  - docker tag golang-identity-service:${TRAVIS_COMMIT} $DOCKER_CUSTOM_HOST/golang-identity-service:${TRAVIS_COMMIT}
  - docker push $DOCKER_CUSTOM_HOST/golang-identity-service:${TRAVIS_COMMIT}
  - docker build --no-cache -t golang-identity-service:latest .
  - docker tag golang-identity-service:latest $DOCKER_CUSTOM_HOST/golang-identity-service:latest
  - docker push $DOCKER_CUSTOM_HOST/golang-identity-service:latest

addons:
  sonarcloud:
    organization: "kiwsan"
    token:
      secure: "${SONAR_CLOUD_TOKEN}" # encrypted value of your token
